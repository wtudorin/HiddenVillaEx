@page "/lifecycle"
@using System.Threading
<h1>Lifecycle Events</h1>
<br />
<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<br />
<p>Current CountDown: @Count</p>
<br />
<button class="btn btn-primary" @onclick=StartCountDown>Start CountDown</button>

@*<div class="border ">
		<LifecycleComponent CountValue="currentCount"> </LifecycleComponent>
	</div>*@

@foreach (var item in EventType)
{
	@item
	<hr />

}

@code {

	List<string> EventType = new List<string>();

	private int currentCount = 0;

	private int Count { get; set; } = 5;

	void StartCountDown()
	{
		var timer = new Timer(TimeCallBack, null, 1000, 1000);

	}

	void TimeCallBack(object state)
	{
		if (Count > 0)
		{
			Count--;
			InvokeAsync(StateHasChanged);
		}
	}

	private void IncrementCount()
	{
		currentCount++;
	}

	protected override bool ShouldRender()
	{
		EventType.Add("ShouldRender is called");
		return true;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			currentCount = 100;
		}
		else
		{
			currentCount = 999;
		}

		EventType.Add("OnAfterRender is called");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		EventType.Add("OnAfterRenderAsync is called");
		await Task.Delay(1000);
	}

	protected override void OnInitialized()
	{
		EventType.Add("OnInititialized is called");
	}

	protected override async Task OnInitializedAsync()
	{
		EventType.Add("OnInititializedAsync is called");
		await Task.Delay(1000);
	}

	protected override async Task OnParametersSetAsync()
	{
		EventType.Add("OnParametersSetAsync is called");
		await Task.Delay(1000);
	}

	protected override void OnParametersSet()
	{
		EventType.Add("OnParametersSet is called");
	}

}